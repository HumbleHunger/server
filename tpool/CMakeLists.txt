INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/include)
IF(WIN32)
  SET(EXTRA_SOURCES tpool_win.cc aio_win.cc)
ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
  OPTION(WITH_URING "Require that io_uring be used" OFF)
  OPTION(WITH_LIBAIO "Require that libaio is used, unless uring is there" OFF)
  IF(WITH_URING)
    SET(URING_REQUIRED REQUIRED)
  ELSEIF(WITH_LIBAIO)
    SET(LIBAIO_REQIRED REQUIRED)
  ENDIF()
  FIND_PACKAGE(URING QUIET ${URING_REQUIRED})
  IF(URING_FOUND)
    SET(URING_FOUND ${URING_FOUND} PARENT_SCOPE)
    SET(TPOOL_DEFINES "-DHAVE_URING" PARENT_SCOPE)
    ADD_DEFINITIONS(-DHAVE_URING)
    LINK_LIBRARIES(${URING_LIBRARIES})
    INCLUDE_DIRECTORIES(${URING_INCLUDE_DIR})
    SET(EXTRA_SOURCES aio_liburing.cc)
  ELSE()
    FIND_PACKAGE(LIBAIO QUIET ${LIBAIO_REQUIRED})
    IF(LIBAIO_FOUND)
      SET(TPOOL_DEFINES "-DLINUX_NATIVE_AIO" PARENT_SCOPE)
      ADD_DEFINITIONS(-DLINUX_NATIVE_AIO)
      INCLUDE_DIRECTORIES(${LIBAIO_INCLUDE_DIR})
      LINK_LIBRARIES(${LIBAIO_LIBRARIES})
      SET(EXTRA_SOURCES aio_linux.cc)
    ENDIF()
  ENDIF()
ENDIF()

ADD_LIBRARY(tpool STATIC
  aio_simulated.cc
  tpool_structs.h
  CMakeLists.txt
  tpool.h
  tpool_generic.cc
  task_group.cc
  task.cc
  wait_notification.cc
  ${EXTRA_SOURCES}
)

IF(URING_FOUND)
  ADD_DEPENDENCIES(tpool GenError)
ENDIF()
